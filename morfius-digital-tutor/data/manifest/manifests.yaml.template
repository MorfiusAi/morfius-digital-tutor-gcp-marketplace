---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  name: "$name-config-map"
  namespace: "$namespace"
  labels:
    app: "$name"
data:
  db: "localhost"
  MONGO_INITDB_ROOT_USERNAME: "$dbUser"
  MONGO_INITDB_ROOT_PASSWORD: "$dbPassword"
  MONGO_INITDB_DATABASE: "auth"
  GOOGLE_APPLICATION_CREDENTIALS: "/app/digital-tutor-398609-94a8e84c738b.json"
  DB_NAME: "localhost"
  GCP_VIDEO_PROJECT_ID: digital-tutor-398609
  GCP_CREDENTIALS_PATH: /app/morfius-platform-402907-50044ce985c3.json
  GCP_BUCKET_ID: morfiusstorage
  GCP_PROJECT_ID: morfius-platform-402907
  URL: http://morfius-tutor-svc
  INDEX_NAME: "$name"
  CLOUD_STORAGE_KEY: gcp
  MONGO_USER: "$dbUser"
  MONGO_PASSWORD: "$dbPassword"
  uri: "mongodb://$dbUser:$dbPassword@morfius-tutor-svc:27017/?authMechanism=DEFAULT"
  config.yaml: |
    # The identity section contains authentication information used
    # by the agent.
    identities:
    - name: gcp
      gcp:
        # This parameter accepts a base64-encoded JSON service
        # account key. The value comes from the reporting secret.
        encodedServiceAccountKey: $AGENT_ENCODED_KEY

    # The metrics section defines the metric that will be reported.
    # Metric names should match verbatim the identifiers created
    # during pricing setup.
    metrics:
    # Metric usage reports are either generated by the agent as
    # defined in "sources", or externally, i.e. by the application.
    # Since this metric is not supported by the "sources" section,
    # the application must send usage reports for this metric to
    # the agent.
    - name: requests
      type: int

      # The endpoints section of a metric defines which endpoints the
      # metric data is sent to.
      endpoints:
      - name: on_disk
      - name: servicecontrol

      # Metrics reported by the application are aggregated by the
      # agent for a specified period of time and sent to the
      # reporting endpoint (e.g. Google Service Control)
      aggregation:
        bufferSeconds: 60

    # The reporting unit which the application should use to report
    # usage to the agent should align with the metric unit in the
    # backend service config (set from the "reporting unit" in the
    # portal).
    #
    # For unit/time metrics, the reporting metric should likely be
    # more granular than the pricing metric, since usage should be
    # reported frequently
    # e.g. metric may be reported in MiBy/min but priced in GiBy/day
    #
    # The reporting metric is recommended to be more granular than
    # the pricing metric. If it is not, a double type is likely
    # needed to provide sufficient precision.
    - name: test_app_data_miby_min
      type: int

      endpoints:
      - name: on_disk
      - name: servicecontrol

      aggregation:
        bufferSeconds: 60

    # The agent is able to automatically send instance time usage
    # reports, configured in the "source" section.
    - name: instance_time
      type: int
      endpoints:
      - name: on_disk
      - name: servicecontrol

      # The passthrough marker indicates that no aggregation should
      # occur for this metric. Reports received are immediately sent
      # to the reporting endpoint. We use passthrough for the
      # instance_time metric since reports are generated
      # automatically by a heartbeat source defined in a later
      # section.
      passthrough: {}

    # The endpoints section defines where metering data is ultimately
    # sent. Currently supported endpoints include:
    # * disk - some directory on the local filesystem
    # * servicecontrol - Google Service Control
    endpoints:
    - name: on_disk
      # The disk endpoint is useful for debugging, but its inclusion
      # is not necessary in a production deployment.
      disk:
        reportDir: /var/lib/ubbagent/reports
        expireSeconds: 3600
    - name: servicecontrol
      servicecontrol:
        identity: gcp
        # The service name is unique to your application and will be
        # provided during onboarding.
        serviceName: my-application.mp-my-company.appspot.com
        consumerId: $AGENT_CONSUMER_ID  # From the reporting secret.

    # The sources section lists metric data sources run by the agent
    # itself - omit it if usage reports for all metrics are reported by
    # the application. The currently supported source is 'heartbeat', which
    # sends a defined value to a metric at a defined interval. In the
    # following example, the heartbeat sends a 60-second value (defined by
    # 'int64Value') through the "instance_time" metric every minute
    # (defined by 'intervalSeconds'); this is assuming that the metric
    # configured in service control has 'seconds' as its unit.
    #
    # IMPORTANT: The unit of the metric is specified in the backend, not here,
    # so care must be taken to ensure that the reported value and the unit match.
    # For example, if the unit is defined to be minutes in the backend, a report
    # value of 60 will mean 60 minutes, which means, for the same configuration,
    # we accidentally inflate the reported usage by 60 times! In this case,
    # where the unit is minute, the correct value should be 1.
    #
    # NOTE: 'intervalSeconds' should not be too short to avoid excessive
    # reporting; it should not be too long to avoid missing events in case of
    # unexpected restarts. The recommended value is 1 minute, or 60 seconds.
    sources:
    - name: instance_time_heartbeat
      heartbeat:
        metric: instance_time
        intervalSeconds: 60
        value:
          int64Value: 60
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "$name"
  namespace: "$namespace"
  labels:
    app: "$name"
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app: "$name"
  template:
    metadata:
      labels:
        app: "$name"
    spec:
      volumes:
      - name: mongo-persistent-storage
        persistentVolumeClaim:
          claimName: morfius-pvc
      - name: ubbagent-config
        configMap:
          name: "$name-config-map"
      containers:
      - name: "$name-backend"
        image: $imagemorfiustutorbackendRegistry/$imagemorfiustutorbackendRepo:$imagemorfiustutorbackendTag
        command: ["gunicorn", "-w", "5", "-b", "0.0.0.0:8081", "app:app", "--timeout", "1800"]
        env:
        - name: "db"
          valueFrom:
            configMapKeyRef:
              key: "db"
              name: "$name-config-map"
        - name: "URL"
          valueFrom:
            configMapKeyRef:
              key: "URL"
              name: "$name-config-map"
        - name: "INDEX_NAME"
          valueFrom:
            configMapKeyRef:
              key: "INDEX_NAME"
              name: "$name-config-map"
        - name: "GOOGLE_APPLICATION_CREDENTIALS"
          valueFrom:
            configMapKeyRef:
              key: "GOOGLE_APPLICATION_CREDENTIALS"
              name: "$name-config-map"
        - name: "GCP_VIDEO_PROJECT_ID"
          valueFrom:
            configMapKeyRef:
              key: "GCP_VIDEO_PROJECT_ID"
              name: "$name-config-map"
        - name: "GCP_CREDENTIALS_PATH"
          valueFrom:
            configMapKeyRef:
              key: "GCP_CREDENTIALS_PATH"
              name: "$name-config-map"
        - name: "GCP_BUCKET_ID"
          valueFrom:
            configMapKeyRef:
              key: "GCP_BUCKET_ID"
              name: "$name-config-map"
        - name: "GCP_PROJECT_ID"
          valueFrom:
            configMapKeyRef:
              key: "GCP_PROJECT_ID"
              name: "$name-config-map"
        - name: "CLOUD_STORAGE_KEY"
          valueFrom:
            configMapKeyRef:
              key: "CLOUD_STORAGE_KEY"
              name: "$name-config-map"
      - name: "morfius-db"
        image: "mongo:jammy"
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        env:
        - name: "MONGO_INITDB_ROOT_USERNAME"
          valueFrom:
            configMapKeyRef:
              key: "MONGO_INITDB_ROOT_USERNAME"
              name: "$name-config-map"
        - name: "MONGO_INITDB_ROOT_PASSWORD"
          valueFrom:
            configMapKeyRef:
              key: "MONGO_INITDB_ROOT_PASSWORD"
              name: "$name-config-map"
        - name: "MONGO_INITDB_DATABASE"
          valueFrom:
            configMapKeyRef:
              key: "MONGO_INITDB_DATABASE"
              name: "$name-config-map"
      - name: "$name-ui"
        image: $imagemorfiustutoruiRegistry/$imagemorfiustutoruiRepo:$imagemorfiustutoruiTag
        imagePullPolicy: "Always"
      - name: "nginx"
        image: $imagemorfiustutorserverRegistry/$imagemorfiustutorserverRepo:$imagemorfiustutorserverTag
        imagePullPolicy: "Always"
      - name: ubbagent
        image: $imageUbbagent
        env:
        - name: AGENT_CONFIG_FILE
          value: "/etc/ubbagent/config.yaml"
        - name: AGENT_LOCAL_PORT
          value: "4567"
        - name: AGENT_ENCODED_KEY
          valueFrom:
            secretKeyRef:
              name: $reportingSecret
              key: reporting-key
        - name: AGENT_CONSUMER_ID
          valueFrom:
            secretKeyRef:
              name: $reportingSecret
              key: consumer-id
        volumeMounts:
        - name: ubbagent-config
          mountPath: /etc/ubbagent
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: morfius-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "morfius-tutor-svc"
  namespace: "$namespace"
  labels:
    app: "$name"
spec:
  ports:
  - name: "http"
    port: 80
    targetPort: 80
  - name: "https"
    port: 443
    targetPort: 443
  - name: "ui"
    protocol: "TCP"
    port: 3000
    targetPort: 3000
  - name: "pinecone"
    protocol: "TCP"
    port: 8081
    targetPort: 8081
  - name: "db"
    protocol: "TCP"
    port: 27017
    targetPort: 27017
  selector:
    app: "$name"
  type: "LoadBalancer"
  loadBalancerIP: ""